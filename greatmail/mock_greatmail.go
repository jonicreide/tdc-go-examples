// Code generated by MockGen. DO NOT EDIT.
// Source: main/greatmail (interfaces: HTTPProvider)

// Package greatmail is a generated GoMock package.
package greatmail

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPProvider is a mock of HTTPProvider interface
type MockHTTPProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPProviderMockRecorder
}

// MockHTTPProviderMockRecorder is the mock recorder for MockHTTPProvider
type MockHTTPProviderMockRecorder struct {
	mock *MockHTTPProvider
}

// NewMockHTTPProvider creates a new mock instance
func NewMockHTTPProvider(ctrl *gomock.Controller) *MockHTTPProvider {
	mock := &MockHTTPProvider{ctrl: ctrl}
	mock.recorder = &MockHTTPProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPProvider) EXPECT() *MockHTTPProviderMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHTTPProvider) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHTTPProviderMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPProvider)(nil).Do), arg0)
}
